http://www.plantuml.com/plantuml/uml/jLXTZjis47xNAVXaI8Q37C2BHTfD0mJ8PjDqqQ9F1ItH2XEPL4bg0sEHNgSdw0boiTBKU3WY5NcHeayMPxuPpi-GdF4BwxXnmw4hwevRotuSZc_rP_POCFP6V-Ilf9KrPnr-0lrETL89rk6dfp-8scd3hcuwAPGJwsjMXo_AkpTSMLvpxRakV7_z--i_mXB8AssKg4MZZSViSN62IEMOTRh-TFU9hcwbyallY9DreAhX88m6E-pMCmi6dfML__oBV3zesJ3UD80kuPUjm7Z4677G3-8Ciyv8rJAb3w82MrhXVXcDAojMQsKTOO2To06bDieCoifMYOPwMI4kgaY0G2L6l9ruZpj-AI35c8EGPNQEs4wORLWVU7_rpkXcS7gzEN6lsPy3Lqusl14Zv2LtWZNSyR24rA7GDUl7Bpko6ptiEi4UUAVDlNQy6ydFdukGC-lJnctPQyCQiPTAcYhmptK4PGHRl-CjF_YbNZCdUutBRH7Ow5nPRQS4pEowtemEh9gdO3QvUmyL2OEF-Edt7EV0WQG1XsuMMR0LsH80w7UBe4Gvb2mOL9uDOtrr2H3oITA90bZWYGnRzq_1pEh5YlmPwKHaDbwOpXA_ebk4r5BeHDFUIA4QfgqpWXzMJFV2y72nNB4Ig6obDwCCEGmhLstZ8RaTEYTtNDNwiG17ZDWB8rGj-NYXi0Z2QYEKhEetYPQa7juZeynm64iAc_eD5v97l5Px4XFqw8ORn_MD4OrqerEiqru2Zl_8nheEXiE93pGg3kwcHEhnPaRv1XM3E43WrWBK_46Ax5nl4iXVmV1ouaPoP17qn212LUn-uySGEp3WNdJXH7HG4YDY30yiah20823G-QXfply4GNLSpdpmUKpuvEau2cwsEVcWbVimGs_uCRuFdW1FGu3RFpmH2cMy3BVnEzjqCxFX9jiioUejxyzQTrftJDgGmeJsHl2U1Z2rjlMAWi6t19Vxwc6_2sxcKW6SiozLBesRp8e32nt_XeAN_3Wh7XWOeQNyNxuDaOgt8RvKM3oa2tmibfxw4xFuzjl3LW2iPhLuus5XemFBZmug9BPYE_fukIz1TjwJrbhO6tteE-6utVf6vIDdFM_rS5bioppyrChK86-e3Bxrs1k3ARCztOb5Slz1V_wXw-R2X77o6uSsiLnk1CvnI51vHv80Of-4NspjgktOpKbL-qnvIMwOXexoRdyVGqExcnLhbrkW51IAljSsxqQMpTuDH_1wqjnTwfdkTUwiHxjKShP6qUl_ItYfZOF24_DQ41ah2ZE4DRM4mNFndzgkU5AhIOlYHAkD7AyQCc8XuqIFlF1qKZOEEsX-02JZ6ku70Krt0xAdnkCOhi0f2GRVPC3nw-W7gz5mQbAqDo9NDOVa86qiVyJIUEDOYQRDkKxPYITLeWMycTSIsOdpLPOCZDwS9igc6KdRDsr8qpHoOTq2FvzguN2dkIIzserMdhuR_5BaZv1DduVSiwTL5-tgw9xpuWbanjHguLN5wUpo09UgM1xUlcFU-r8agNWlMcaTR-849HiIL77Wiii3_TE9F1CgO51X6klNJIuJg11HSkhZ7qnPiNnlpb4t3gMFsJyVq1uZeaodsdnYz8Z5ax5TEXeWAuqRU7TvI1Z_DOhtVFBVKFAI1sOg0Xvbz6HUmJ0cUXCWfZR7pVyTigZF-mb_RQwVFIDDRKA5HubIyGAcH2XnIefbLQ08qvvnVawY-a36LpbXfD4hi43yBkD8EILDXl04ZNz75BZTQO_Gw2Sa52nI2zXwOYxTZsY3a0HmUWCKBuHgXaFtBm00

@startuml
class BuyNow {
  LojaFisica lojaFisica
  LojaOnline lojaOnline
  vector <Cliente*> cliente
  vector <Transacao*> transações
  vector <Fornecedor*> fornecedors
  int stockOk
  int stockMin
  static int numeroClientes;
  
  BuyNow()
  ~BuyNow()
  void addCliente(Cliente &cliente)
  void removeCliente(string nome)
  int getStockOk() const
  int getStockMin() const
  void setStockOk(unsigned int stockOk)
  void setStockMin(unsigned int stockMin)
  int getNumeroClientes() const
}

class Transacao {
    int number;
    map<Produto*, int> quantidade;
    Date data;
    vector<Produto*> produtos;
    double valorTotal;
    //estatisticas(por definir)
    Cliente* cliente;
    Pagamento* tipoPagamento;

    Transacao();
    Transacao(Cliente *c, Date &d);
    Transacao(Cliente *c, Date &d, vector<Produto*> v);
    Date getDate() const;
    void setDate(Date &d);
    void setCliente(Cliente *c);
    Cliente* getCliente() const;
    void addProduto(Produto* p);
    void addProduto(Produto* p, int quantidade);
    void removeProduto(Produto *p);
    void removeProduto(Produto *p, int quantidade);
    int getQuantidade(Produto *p) const;
    void setPagamento(Pagamento* p);
    Pagamento* getPagamento() const;
    friend ostream& operator << (ostream &o, const Transacao &t);
}

class Multibanco{
   int referencia
  
    Multibanco();
    Multibanco(double valorTotal, int referencia);
    void setReferencia(int referencia);
    int getReferencia() const;
    string getInfo() const;
}

class CartaoCredito{
    long int numCartao;
    Date validade;

    CartaoCredito();
    CartaoCredito(double valor, long int numCartao, Date val);
    long int getNumCartao() const;
    void setNumCartao(long int numCartao);
    void setValidade(Date validade);
    Date getValidade() const;
    string getInfo() const;
}
class MbWay{
   int numTelemovel
  
    MbWay();
    MbWay(double valor, int num);
    int getNumTelemovel() const;
    void setNumTelemovel(int num);
    string getInfo() const;
}

class Date{
    unsigned int year;
    unsigned int month;
    unsigned int day;
    map<int, int> months_map;

    Date();
    Date(unsigned int year, unsigned int month, unsigned int day);
    void setMap();
    bool isValid();
    bool isLeap() const;
    map<int, int> getMonthsMap() const;
    unsigned int getYear() const;
    void setYear(int year);
    unsigned int getMonth() const;
    void setMonth(int month);
    unsigned int getDay() const;
    void setDay(int day);
    string getInfo() const;
    friend ostream& operator << (ostream& o, const Date &d);
}

class LojaFisica{
   vector<Produto*> produtos
   
   void addProduto(Produto &produto)
   vector<Produto*> getProdutos() const;
   void removeProduto(Produto &produto)
}

class LojaOnline{
    vector<Produto*> produtos;
    vector<Transacao*> transacoesCompletas; //ja pagou
    vector<Transacao*> transacoes;  //por completar
    vector<Cliente *> clientes;
    unsigned int stockMin;
  
    void showAllProdutos() const;
    void reporStock();
    void addProduto(Produto produto);
    void addCliente(Cliente *c);
    void addTransacao(Transacao *t);    //incrementar o numberOfTransacoes;
    Cliente& getCliente(Cliente *c);
    Cliente& getCliente(int pos);
    void removeCliente(Cliente *c);
    void buyProduto(Cliente *c, Produto* p);
    void addProdutoToTransacao(Transacao* t, Produto* p);
    void removeProdutoOfTransacao(Transacao* t, Produto* p);
    void removeProdutoOfTransacao(Transacao* t, Produto* p, int quantidade);
    void completeTransacao(Transacao* t);
    void showAllTransacoes() const;
    void showAllTransacoesCompletas() const;
    friend ostream& operator << (ostream &o, const LojaOnline);
}

class Categoria{
   string nomeCategoria
   
   string getNomeCategoria() const
   void setNome(string nome)
}

class Produto{
   string nomeProduto
   int stockFisico
   int stockOnline
   double valor
   Categoria categoria

   void setCategoria(Categoria &cat);
   Categoria& getCategoria() const;
   int getStockFisico() const
   void setStockFisico(int stockFisico)
   int getStockOnline() const
   void setStockOnline(int stockOnline) 
   string getNomeProduto() const
   void setNomeProduto(string nome)
    void setValor(double val)
    double getValor() const
}

class Cliente{
   string nome
   int numContribuinte
   vector<Produtos*> produtos;
   
   string getNome() const
   void setNome(string nome)
   int getNumContribuinte() const
   void setNumContribuinte(int numContribuinte)
   void addProduto(Produto *p);
   void removeProduto(Produto *p);
   void addProduto(Produto *p, int quantidade);
   void removeProduto(Produto *p, int quantidade);
}


class ClienteRegistado{
   int id
   string email
   
   string getEmail() const
   void setEmail(string email)
   int getId() const
   void setId(int num)
}

class Fornecedor{
   string nome

   string getNome() const
   void setNome(string nome)
}

class Pagamento{
    double valor;

    Pagamento();
    Pagamento(double valorTotal);
    void setValor(double val);
    double getValor() const;
    virtual string getInfo() const;
}

class NumeroTransacoes{
    int numberOfTransacoes;

    NumeroTransacoes();
    NumeroTransacoes(int num);
    void setNumberOfTransacoes(int num);
    int getNumberOfTransacoes() const;
    void addNumberOfTransacoes(int num);
}

BuyNow *-- LojaFisica
BuyNow *-- LojaOnline
BuyNow *-- Categoria
BuyNow *-- Cliente
BuyNow *-- Fornecedor
Categoria o-- Produto
LojaOnline o-- Transacao
LojaOnline o--NumeroTransacoes
Pagamento*-- MbWay
Pagamento*-- CartaoCredito
Pagamento*-- Multibanco
Transacao o-- Date
Transacao o-- Pagamento
NumeroTransacoes *-- Transacao
CartaoCredito o-- Date
Cliente *-- ClienteRegistado
@enduml