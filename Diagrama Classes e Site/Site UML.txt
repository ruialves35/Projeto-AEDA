http://www.plantuml.com/plantuml/uml/dLTTRjms47xNAVYqa1OASe0rZA1E0nI8xJGrMlIfu4gpAXk9L4bgYuNHNgSdw0boiMgfqNX4qVOYJqlEVFC_6iw-SrvQFtHjLhNIEV7TSBepVud7J8YFvW_vGJbLIT7I4UdtkbKQH4l7aNw4oXihhcvQ1Th3zbfKuSHv3rPg9ojfHguFvw__VlqFt0XHsWldJVNb_Wk_tIezNZE1dkN5UFo7dOz6rKBMDLhDyLTiq3XXB7Jc23FCUQjq8xJfe41p3VYV9ljv8IgZdMSCT8KugDGzoGpQgKP3pGCfE0vLH42a5jdV6PQ0SXIg84Gd-wjFrjI3DzloB7Gj_XoazggMDUm2vBtq86hfPRXYjadeMlJJoKtisWpx5iHHjiO-62_RYVpsBJWllN9ULTBblR6YXeFIoXQ1FzSLougcFyb6Tg17CyAhtj1rbmKs1PCNkoM1AhMjoYc0JNq9fbo7TonO6Xhmvz-vKe63HK0ECyPOQ8gPH035tH0eKeujY0xbisEYBru3X7goSf80DMma8xRz1PYqNkhc7udEH9BvedBcUE9XCLB3eGjD1wj0ry8uRq5s6s5wi3BCWYkH8rLiJ3d9iERV-D4CVHItG-lLNkhAF6OOY8K3MD2LajE040o4tSOfgwul8orHFtmcHhx6KIuvR14t3fWHyOC-i9nGH3VIUcbkBDJAJq69rkWcwDL3Dx6fhuFZ-CK76XV7S6CYZxXCA2z9COeZ9CHrDwDI7n9dh_L6YVmP7SyNOKIVB84kJ29snVuNUGgvGmSUe0rVH8ijCI4mFNXPfWK5bqMzOvfIyKS8qd5HvKFCKy4NJy49fDsjoPtH_lS4lPQd7RqF8m6VXW1tlut4NKOPnWHCvvNHCc6mN1cBgdeh-rdhtfXMA1TA6D4-Wknv0cDlcr5HSFWsnf5vBCcl86sg5CYPOodMqcGaAOui2lmP1U_bAIaU69YXTFqlduP4fMb8BnKr3zlA7hENdlepCtl-xH4R11OfBM6Uew8v0EO2RNslku3CzTvN6N3PImwIVsnYUcYCLLFaR8CZ1WRDId37sHGArIy0ecsGxA4diJKaPu9jgQ4YInBknT6-5KAcfP8aKvvnTcIeYBIWiQGMnevyArQvek1IcZYR9omUziQo4JjnyTuWVzrIk5V5gMQJ_SReaRuVnYkaotnPTVcGvqhJuX4auKkn2k8pDCfvMIyQ1pgfshNVtv_92Sl8uCBCq0TZDLHG6xjAsBUcXNJJ6lUu-g-03meXydWFNEzOY7YsEtOljGVAAki7sRx-h8x50ciUQBfC0M39zc3l3qyy32KMmOXMzEY5fpJ6UcCWTLgCI_-1U45VY1F_d6_Vl67FG4p5kODKCr9f_d4YDYiZiRRAI2Gmvedtf3wGQQX7Z3Xx6JN8wEEqX2r9YxKrGjC2dv6viutmD4Oa4inY3yHsuIwtnxHXIW8u_fQpTw3heMl_1m00

@startuml
class BuyNow {
  LojaFisica lojaFisica
  LojaOnline lojaOnline
  vector <Cliente*> cliente
  vector <Transacao*> transações
  int stockOk
  int stockMin
  
  BuyNow()
  ~BuyNow()
  void addCliente(Cliente &cliente)
  void removeCliente(string nome)
  int getStockOk() const
  int getStockMin() const
  void setStockOk(unsigned int stockOk)
  void setStockMin(unsigned int stockMin)
}

class Transacao {
    map<Produto*, int> quantidade;
    Date data;
    vector<Produto*> produtos;
    double valorTotal;
    //estatisticas(por definir)
    Cliente* cliente;
    Pagamento* tipoPagamento;

    Transacao();
    Transacao(Cliente *c, Date &d);
    Transacao(Cliente *c, Date &d, vector<Produto*> v);
    Date getDate() const;
    void setDate(Date &d);
    void setCliente(Cliente *c);
    Cliente* getCliente() const;
    void addProduto(Produto* p);
    void addProduto(Produto* p, int quantidade);
    void removeProduto(Produto *p);
    void removeProduto(Produto *p, int quantidade);
    int getQuantidade(Produto *p) const;
    void setPagamento(Pagamento* p);
    Pagamento* getPagamento() const;
    friend ostream& operator << (ostream &o, const Transacao &t);
}

class Multibanco{
   int referencia
  
    Multibanco();
    Multibanco(double valorTotal, int referencia);
    void setReferencia(int referencia);
    int getReferencia() const;
    string getInfo() const;
}

class CartaoCredito{
    long int numCartao;
    Date validade;

    CartaoCredito();
    CartaoCredito(double valor, long int numCartao, Date val);
    long int getNumCartao() const;
    void setNumCartao(long int numCartao);
    void setValidade(Date validade);
    Date getValidade() const;
    string getInfo() const;
}
class MbWay{
   int numTelemovel
  
    MbWay();
    MbWay(double valor, int num);
    int getNumTelemovel() const;
    void setNumTelemovel(int num);
    string getInfo() const;
}

class Date{
    unsigned int year;
    unsigned int month;
    unsigned int day;
    map<int, int> months_map;

    Date();
    Date(unsigned int year, unsigned int month, unsigned int day);
    void setMap();
    bool isValid();
    bool isLeap() const;
    map<int, int> getMonthsMap() const;
    unsigned int getYear() const;
    void setYear(int year);
    unsigned int getMonth() const;
    void setMonth(int month);
    unsigned int getDay() const;
    void setDay(int day);
    string getInfo() const;
    friend ostream& operator << (ostream& o, const Date &d);
}

class LojaFisica{
   vector<Produto*> produtos
   
   void addProduto(Produto &produto)
   vector<Produto*> getProdutos() const
}

class LojaOnline{
   vector<Produto*> produtos
   vector<Transacao*> transacoes

   void addProduto(Produto produto)
}

class Categoria{
   string nomeCategoria
   
   string getNomeCategoria() const
   void setNome(string nome)
}

class Produto{
   string nomeProduto
   int stockFisico
   int stockOnline
   double valor

   int getStockFisico() const
   void setStockFisico(int stockFisico)
   int getStockOnline() const
   void setStockOnline(int stockOnline) 
   string getNomeProduto() const
   void setNomeProduto(string nome)
    void setValor(double val)
    double getValor() const
}

class Cliente{
   string nome
   int numContribuinte
   
   string getNome() const
   void setNome(string nome)
   int getNumContribuinte() const
   void setNumContribuinte(int numContribuinte)
}

class ClienteRegistado{
   string email
   
   string getEmail() const
   void setEmail(string email)
}

class Fornecedor{
   string nome

   string getNome() const
   void setNome(string nome)
}

class Pagamento{
    double valor;

    Pagamento();
    Pagamento(double valorTotal);
    void setValor(double val);
    double getValor() const;
    virtual string getInfo() const;
}

class NumeroTransacoes{
    int numberOfTransacoes;

    NumeroTransacoes();
    NumeroTransacoes(int num);
    void setNumberOfTransacoes(int num);
    int getNumberOfTransacoes() const;
    void addNumberOfTransacoes(int num);
}

BuyNow *-- LojaFisica
BuyNow *-- LojaOnline
BuyNow o-- Categoria
BuyNow o-- Cliente
BuyNow o-- Fornecedor
Categoria o-- Produto
LojaOnline o-- Transacao
LojaOnline o--NumeroTransacoes
Pagamento*-- MbWay
Pagamento*-- CartaoCredito
Pagamento*-- Multibanco
Transacao o-- Date
Transacao o-- Pagamento
NumeroTransacoes *-- Transacao
CartaoCredito o-- Date
Cliente *-- ClienteRegistado
@enduml